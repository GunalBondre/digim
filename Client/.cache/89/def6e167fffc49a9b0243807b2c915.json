{"id":"node_modules/reified/lib/bitfield.js","dependencies":[{"name":"G:\\computer-science\\konfinity\\digim\\client\\package.json","includedInParent":true,"mtime":1602208794243},{"name":"G:\\computer-science\\konfinity\\digim\\client\\node_modules\\reified\\package.json","includedInParent":true,"mtime":1602208793127},{"name":"./utility","loc":{"line":3,"column":23},"parent":"G:\\computer-science\\konfinity\\digim\\client\\node_modules\\reified\\lib\\bitfield.js","resolved":"G:\\computer-science\\konfinity\\digim\\client\\node_modules\\reified\\lib\\utility.js"},{"name":"./genesis","loc":{"line":4,"column":23},"parent":"G:\\computer-science\\konfinity\\digim\\client\\node_modules\\reified\\lib\\bitfield.js","resolved":"G:\\computer-science\\konfinity\\digim\\client\\node_modules\\reified\\lib\\genesis.js"}],"generated":{"js":"\"use strict\";\n\nvar utility  = require('./utility');\nvar genesis  = require('./genesis');\nvar bytesFor = utility.bytes;\nvar bits     = utility.bits;\nvar BitfieldSubtype = genesis.Subtype.bind(BitfieldType);\n\nvar powers = Array.apply(null, Array(32)).map(Function.call.bind(Number)).map(Math.pow.bind(null, 2));\n\nmodule.exports = BitfieldType;\n\n// ################################\n// ### BitfieldType Constructor ###\n// ################################\n\nfunction BitfieldType(name, flags, bytes){\n  if (typeof name !== 'string') {\n    bytes = flags;\n    flags = name;\n    name = '';\n  }\n  if (typeof flags === 'number') {\n    bytes = flags;\n    flags = [];\n  }\n\n  if (Array.isArray(flags)) {\n    flags = flags.reduce(function(ret, name, index){\n      ret[name] = 1 << index;\n      return ret;\n    }, {});\n  }\n\n  if (!(bytes > 0)) {\n    bytes = bytesFor(max(flags)) ;\n  }\n\n  // #############################\n  // ### BitfieldT Constructor ###\n  // #############################\n\n  function BitfieldT(data, offset, values) {\n    if (!genesis.isBuffer(data)) {\n      values = data || 0;\n      data = null;\n    }\n    this.rebase(data);\n    genesis.api(this, '_offset', +offset || 0);\n\n    if (Array.isArray(values)) {\n      values.forEach(function(flag){ this[flag] = true }, this);\n    } else if (typeof values === 'number') {\n      this.write(values);\n    } else if (Object(values) === values){\n      Object.keys(values).forEach(function(key){ this[key] = values[key] }, this);\n    }\n    return this;\n  };\n\n  BitfieldT.keys = flags;\n\n  // ######################\n  // ### BitfieldT Data ###\n  // ######################\n\n  BitfieldT.prototype = {\n    flags: flags,\n    length: bytes * 8,\n    toString: function toString(){\n      return this === BitfieldT.prototype\n                      ? '[object '+name+']'\n                      : this.map(function(v){ return +v }).join('');\n    }\n  };\n\n  var out = BitfieldSubtype(name, bytes, BitfieldT);\n\n  return defineFlags(out);\n}\n\n\nfunction defineFlags(target) {\n  var largest = 0;\n  Object.keys(target.keys).forEach(function(flag){\n    var val = target.keys[flag];\n    largest = Math.max(largest, val);\n    Object.defineProperty(target.prototype, flag, {\n      configurable: true,\n      enumerable: true,\n      get: function( ){ return (this.read() & val) > 0 },\n      set: function(v){ this.write(v ? this.read() | val : this.read() & ~val) }\n    })\n  });\n  Array.apply(null, Array(target.bytes * 8)).forEach(function(n, i){\n    var power = powers[i];\n    if (power > largest) return;\n    Object.defineProperty(target.prototype, i, {\n      configurable: true,\n      enumerable: true,\n      get: function( ){ return (this.read() & power) > 0 },\n      set: function(v){ this.write(v ? this.read() | power : this.read() & ~power) }\n    });\n  });\n  return target;\n}\n\n\n\n// #########################\n// ### BitfieldType Data ###\n// #########################\n\ngenesis.Type(BitfieldType, {\n  DataType: 'bitfield',\n  forEach: Array.prototype.forEach,\n  reduce: Array.prototype.reduce,\n  map: Array.prototype.map,\n  get: function get(i){\n    return (this.read() & powers[i]) > 0;\n  },\n  set: function get(i){\n    this.write(this.read() | powers[i]);\n    return this;\n  },\n  unset: function unset(i){\n    this.write(this.read() & ~powers[i]);\n    return this;\n  },\n  write: function write(v){\n    this._data['writeUint'+this.length](this._offset, v);\n    return this;\n  },\n  read: function read(){\n    return this._data['readUint'+this.length](this._offset);\n  },\n  reify: function reify(deallocate){\n    var flags = Object.keys(this.flags);\n    if (flags.length) {\n        var val = flags.reduce(function(ret, flag, i){\n          if (this[flag]) ret.push(flag);\n        return ret;\n      }.bind(this), []);\n    } else {\n      var val = this.map(function(v){ return v });\n    }\n    if (deallocate) {\n      delete this._data;\n      delete this._offset;\n    }\n    return val;\n  }\n});\n\nfunction max(arr){\n  if (Array.isArray(arr)) return arr.reduce(function(r,s){ return Math.max(s, r) }, 0);\n  else return Object.keys(arr).reduce(function(r,s){ return Math.max(arr[s], r) }, 0);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/reified/lib/bitfield.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/reified/lib/bitfield.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}}],"sources":{"node_modules/reified/lib/bitfield.js":"\"use strict\";\n\nvar utility  = require('./utility');\nvar genesis  = require('./genesis');\nvar bytesFor = utility.bytes;\nvar bits     = utility.bits;\nvar BitfieldSubtype = genesis.Subtype.bind(BitfieldType);\n\nvar powers = Array.apply(null, Array(32)).map(Function.call.bind(Number)).map(Math.pow.bind(null, 2));\n\nmodule.exports = BitfieldType;\n\n// ################################\n// ### BitfieldType Constructor ###\n// ################################\n\nfunction BitfieldType(name, flags, bytes){\n  if (typeof name !== 'string') {\n    bytes = flags;\n    flags = name;\n    name = '';\n  }\n  if (typeof flags === 'number') {\n    bytes = flags;\n    flags = [];\n  }\n\n  if (Array.isArray(flags)) {\n    flags = flags.reduce(function(ret, name, index){\n      ret[name] = 1 << index;\n      return ret;\n    }, {});\n  }\n\n  if (!(bytes > 0)) {\n    bytes = bytesFor(max(flags)) ;\n  }\n\n  // #############################\n  // ### BitfieldT Constructor ###\n  // #############################\n\n  function BitfieldT(data, offset, values) {\n    if (!genesis.isBuffer(data)) {\n      values = data || 0;\n      data = null;\n    }\n    this.rebase(data);\n    genesis.api(this, '_offset', +offset || 0);\n\n    if (Array.isArray(values)) {\n      values.forEach(function(flag){ this[flag] = true }, this);\n    } else if (typeof values === 'number') {\n      this.write(values);\n    } else if (Object(values) === values){\n      Object.keys(values).forEach(function(key){ this[key] = values[key] }, this);\n    }\n    return this;\n  };\n\n  BitfieldT.keys = flags;\n\n  // ######################\n  // ### BitfieldT Data ###\n  // ######################\n\n  BitfieldT.prototype = {\n    flags: flags,\n    length: bytes * 8,\n    toString: function toString(){\n      return this === BitfieldT.prototype\n                      ? '[object '+name+']'\n                      : this.map(function(v){ return +v }).join('');\n    }\n  };\n\n  var out = BitfieldSubtype(name, bytes, BitfieldT);\n\n  return defineFlags(out);\n}\n\n\nfunction defineFlags(target) {\n  var largest = 0;\n  Object.keys(target.keys).forEach(function(flag){\n    var val = target.keys[flag];\n    largest = Math.max(largest, val);\n    Object.defineProperty(target.prototype, flag, {\n      configurable: true,\n      enumerable: true,\n      get: function( ){ return (this.read() & val) > 0 },\n      set: function(v){ this.write(v ? this.read() | val : this.read() & ~val) }\n    })\n  });\n  Array.apply(null, Array(target.bytes * 8)).forEach(function(n, i){\n    var power = powers[i];\n    if (power > largest) return;\n    Object.defineProperty(target.prototype, i, {\n      configurable: true,\n      enumerable: true,\n      get: function( ){ return (this.read() & power) > 0 },\n      set: function(v){ this.write(v ? this.read() | power : this.read() & ~power) }\n    });\n  });\n  return target;\n}\n\n\n\n// #########################\n// ### BitfieldType Data ###\n// #########################\n\ngenesis.Type(BitfieldType, {\n  DataType: 'bitfield',\n  forEach: Array.prototype.forEach,\n  reduce: Array.prototype.reduce,\n  map: Array.prototype.map,\n  get: function get(i){\n    return (this.read() & powers[i]) > 0;\n  },\n  set: function get(i){\n    this.write(this.read() | powers[i]);\n    return this;\n  },\n  unset: function unset(i){\n    this.write(this.read() & ~powers[i]);\n    return this;\n  },\n  write: function write(v){\n    this._data['writeUint'+this.length](this._offset, v);\n    return this;\n  },\n  read: function read(){\n    return this._data['readUint'+this.length](this._offset);\n  },\n  reify: function reify(deallocate){\n    var flags = Object.keys(this.flags);\n    if (flags.length) {\n        var val = flags.reduce(function(ret, flag, i){\n          if (this[flag]) ret.push(flag);\n        return ret;\n      }.bind(this), []);\n    } else {\n      var val = this.map(function(v){ return v });\n    }\n    if (deallocate) {\n      delete this._data;\n      delete this._offset;\n    }\n    return val;\n  }\n});\n\nfunction max(arr){\n  if (Array.isArray(arr)) return arr.reduce(function(r,s){ return Math.max(s, r) }, 0);\n  else return Object.keys(arr).reduce(function(r,s){ return Math.max(arr[s], r) }, 0);\n}"},"lineCount":158}},"error":null,"hash":"5cae73048daf2c458328226f998ca7f0","cacheData":{"env":{}}}